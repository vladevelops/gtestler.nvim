==============================================================================
gtestler API                                                       *gtestler*

gtestler provides a simple list of APIs. Below is the documentation for usage.

------------------------------------------------------------------------------
Available Commands:

    :h gtestler.add_test
    :h gtestler.add_favorite_test
    :h gtestler.open_tests_list
    :h gtestler.execute_test
    :h gtestler.execute_favorite_test
    :h gtestler.delete_test
    :h gtestler.visual_delete
    :h gtestler.toggle_favorite
    :h gtestler.go_to_test_function
    :h gtestler.jump_to_next
    :h gtestler.jump_to_previous


------------------------------------------------------------------------------
open_tests_list()                                 *gtestler.open_tests_list()*
Opens a list of all added tests for the current project. The project's working
directory is used to locate the valid tests:
    >
      vim.fn.getcwd() 
<
The last directory in the path provided by the `getcwd()` command is used as
the project directory.
If before test name you see * (ex: * TestMyTestSample) it means this test is 
a favorite test at the moment.

------------------------------------------------------------------------------
execute_test()                                       *gtestler.execute_test()*
Executes the test under the cursor. You can also use `<CR>`, which is mapped 
to run the test in the context of the gtestler buffer list.

------------------------------------------------------------------------------
add_test()                                               *gtestler.add_test()*
Adds the test under the cursor to the list. You can run this from any line 
within the test function scope:
>
    [no] 
    [yes] func TestMyTestSample(t *testing.T) {
    [yes]     ... 
    [yes]     ...
    [yes]     ... 
    [yes] } 
    [no]
<
The plugin will add the name of the function as a label for the test.

------------------------------------------------------------------------------
add_favorite_test()                             *gtestler.add_favorite_test()*
Similar to `add_test()`, but also marks the test as a favorite. The test 
can now be executed using `execute_favorite_test()`.

------------------------------------------------------------------------------
execute_favorite_test()                     *gtestler.execute_favorite_test()*
Executes the favorite test.

------------------------------------------------------------------------------
delete_test()                                         *gtestler.delete_test()*
Deletes the test under the cursor.

It will automatically refresh the buffer list.

------------------------------------------------------------------------------
visual_delete()                                      *gtestler.visual_delete()*
Deletes the tests selected in visual mode.

Press v to enter visual line mode, in the list buffer the v is mapped to V
so it will always select the lines.

Pressing d will delete all the selected tests.

It will automatically refresh the buffer list.

------------------------------------------------------------------------------
toggle_favorite()                                  *gtestler.toggle_favorite()*

In the list of tests press f to toggle between current test 
being favorite or not
------------------------------------------------------------------------------
go_to_test_function()                          *gtestler.go_to_test_function()*

Pressing g on the test in the list, it will take you directly to that 
function. Be aware renaming the file or the test function, will broke 
the jumping system.
------------------------------------------------------------------------------
jump_to_next()                                                 *jump_to_next()*

Jumps to next test in the current buffer, from your current cursor location.
If no test is founded below the cursor it will wrap around to check 
tests available before the cursor.

------------------------------------------------------------------------------
jump_to_previous()                                          *jump_to_previous()*

Jumps to previous test in the current buffer, from your current cursor location.
If no test is founded above the cursor it will wrap around to check 
tests available below the cursor.

vim:tw=80:ts=8:ft=help
